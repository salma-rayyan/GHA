
LCD_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00800060  000005f8  0000066c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000006aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000147f  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000087e  00000000  00000000  00001c7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000966  00000000  00000000  000024fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e0  00000000  00000000  00002e64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000480  00000000  00000000  00003044  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a2a  00000000  00000000  000034c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00003eee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 39       	cpi	r26, 0x9E	; 158
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 c0 02 	call	0x580	; 0x580 <main>
  7a:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Button_Init>:
 */
#include "button.h"

void Button_Init(void)
{
	DIO_SetPinDir (DIO_PORTB,DIO_PIN0,DIO_PIN_INPUT);
  82:	40 e0       	ldi	r20, 0x00	; 0
  84:	60 e0       	ldi	r22, 0x00	; 0
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinDir>
	DIO_SetPinDir (DIO_PORTD,DIO_PIN2,DIO_PIN_INPUT);
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	62 e0       	ldi	r22, 0x02	; 2
  90:	83 e0       	ldi	r24, 0x03	; 3
  92:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinDir>
	DIO_SetPinDir (DIO_PORTD,DIO_PIN6,DIO_PIN_INPUT);
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	66 e0       	ldi	r22, 0x06	; 6
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinDir>
  a0:	08 95       	ret

000000a2 <Button_GetValue>:
}
uint8 Button_GetValue(uint8 BUTTON_NUMBER)
{
  a2:	1f 93       	push	r17
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	1f 92       	push	r1
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	18 2f       	mov	r17, r24
	uint8 value;
	switch (BUTTON_NUMBER)
  b0:	82 30       	cpi	r24, 0x02	; 2
  b2:	a1 f1       	breq	.+104    	; 0x11c <Button_GetValue+0x7a>
  b4:	86 30       	cpi	r24, 0x06	; 6
  b6:	d1 f0       	breq	.+52     	; 0xec <Button_GetValue+0x4a>
  b8:	81 11       	cpse	r24, r1
  ba:	47 c0       	rjmp	.+142    	; 0x14a <Button_GetValue+0xa8>
	{
		case BUTTON_0:
		DIO_ReadPin( DIO_PORTB ,BUTTON_NUMBER  ,&value);
  bc:	ae 01       	movw	r20, r28
  be:	4f 5f       	subi	r20, 0xFF	; 255
  c0:	5f 4f       	sbci	r21, 0xFF	; 255
  c2:	68 2f       	mov	r22, r24
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_ReadPin>
		while (GET_BIT(PINB,BUTTON_NUMBER)==1);
  ca:	86 b3       	in	r24, 0x16	; 22
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	01 2e       	mov	r0, r17
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <Button_GetValue+0x34>
  d2:	95 95       	asr	r25
  d4:	87 95       	ror	r24
  d6:	0a 94       	dec	r0
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <Button_GetValue+0x30>
  da:	80 fd       	sbrc	r24, 0
  dc:	f6 cf       	rjmp	.-20     	; 0xca <Button_GetValue+0x28>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	8f e3       	ldi	r24, 0x3F	; 63
  e0:	9c e9       	ldi	r25, 0x9C	; 156
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <Button_GetValue+0x40>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <Button_GetValue+0x46>
  e8:	00 00       	nop
  ea:	2f c0       	rjmp	.+94     	; 0x14a <Button_GetValue+0xa8>
		_delay_ms(10);
		break;
		
		case BUTTON_1:
		DIO_ReadPin( DIO_PORTD ,BUTTON_NUMBER  ,&value);
  ec:	ae 01       	movw	r20, r28
  ee:	4f 5f       	subi	r20, 0xFF	; 255
  f0:	5f 4f       	sbci	r21, 0xFF	; 255
  f2:	68 2f       	mov	r22, r24
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_ReadPin>
		while (GET_BIT(PIND,BUTTON_NUMBER)==1);
  fa:	80 b3       	in	r24, 0x10	; 16
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	01 2e       	mov	r0, r17
 100:	02 c0       	rjmp	.+4      	; 0x106 <Button_GetValue+0x64>
 102:	95 95       	asr	r25
 104:	87 95       	ror	r24
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <Button_GetValue+0x60>
 10a:	80 fd       	sbrc	r24, 0
 10c:	f6 cf       	rjmp	.-20     	; 0xfa <Button_GetValue+0x58>
 10e:	8f e3       	ldi	r24, 0x3F	; 63
 110:	9c e9       	ldi	r25, 0x9C	; 156
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <Button_GetValue+0x70>
 116:	00 c0       	rjmp	.+0      	; 0x118 <Button_GetValue+0x76>
 118:	00 00       	nop
 11a:	17 c0       	rjmp	.+46     	; 0x14a <Button_GetValue+0xa8>
		_delay_ms(10);
		break;
		
		case BUTTON_2:
		DIO_ReadPin( DIO_PORTD ,BUTTON_NUMBER  ,&value);
 11c:	ae 01       	movw	r20, r28
 11e:	4f 5f       	subi	r20, 0xFF	; 255
 120:	5f 4f       	sbci	r21, 0xFF	; 255
 122:	68 2f       	mov	r22, r24
 124:	83 e0       	ldi	r24, 0x03	; 3
 126:	0e 94 8d 01 	call	0x31a	; 0x31a <DIO_ReadPin>
		while (GET_BIT(PIND,BUTTON_NUMBER)==1);
 12a:	80 b3       	in	r24, 0x10	; 16
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	01 2e       	mov	r0, r17
 130:	02 c0       	rjmp	.+4      	; 0x136 <Button_GetValue+0x94>
 132:	95 95       	asr	r25
 134:	87 95       	ror	r24
 136:	0a 94       	dec	r0
 138:	e2 f7       	brpl	.-8      	; 0x132 <Button_GetValue+0x90>
 13a:	80 fd       	sbrc	r24, 0
 13c:	f6 cf       	rjmp	.-20     	; 0x12a <Button_GetValue+0x88>
 13e:	8f e3       	ldi	r24, 0x3F	; 63
 140:	9c e9       	ldi	r25, 0x9C	; 156
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <Button_GetValue+0xa0>
 146:	00 c0       	rjmp	.+0      	; 0x148 <Button_GetValue+0xa6>
 148:	00 00       	nop
		_delay_ms(10);
		break;
	}
	return value;
}
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	0f 90       	pop	r0
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	08 95       	ret

00000156 <DIO_SetPinDir>:
				break;
			case DIO_PORTC :
				*Val = PINC ;
				break;
			case DIO_PORTD :
				*Val = PIND ;
 156:	44 23       	and	r20, r20
 158:	b9 f1       	breq	.+110    	; 0x1c8 <DIO_SetPinDir+0x72>
 15a:	41 30       	cpi	r20, 0x01	; 1
 15c:	09 f0       	breq	.+2      	; 0x160 <DIO_SetPinDir+0xa>
 15e:	6b c0       	rjmp	.+214    	; 0x236 <DIO_SetPinDir+0xe0>
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	89 f0       	breq	.+34     	; 0x186 <DIO_SetPinDir+0x30>
 164:	28 f0       	brcs	.+10     	; 0x170 <DIO_SetPinDir+0x1a>
 166:	82 30       	cpi	r24, 0x02	; 2
 168:	c9 f0       	breq	.+50     	; 0x19c <DIO_SetPinDir+0x46>
 16a:	83 30       	cpi	r24, 0x03	; 3
 16c:	11 f1       	breq	.+68     	; 0x1b2 <DIO_SetPinDir+0x5c>
 16e:	08 95       	ret
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_SetPinDir+0x24>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_SetPinDir+0x20>
 17e:	9a b3       	in	r25, 0x1a	; 26
 180:	89 2b       	or	r24, r25
 182:	8a bb       	out	0x1a, r24	; 26
 184:	08 95       	ret
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_SetPinDir+0x3a>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_SetPinDir+0x36>
 194:	97 b3       	in	r25, 0x17	; 23
 196:	89 2b       	or	r24, r25
 198:	87 bb       	out	0x17, r24	; 23
 19a:	08 95       	ret
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_SetPinDir+0x50>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_SetPinDir+0x4c>
 1aa:	94 b3       	in	r25, 0x14	; 20
 1ac:	89 2b       	or	r24, r25
 1ae:	84 bb       	out	0x14, r24	; 20
 1b0:	08 95       	ret
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_SetPinDir+0x66>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_SetPinDir+0x62>
 1c0:	91 b3       	in	r25, 0x11	; 17
 1c2:	89 2b       	or	r24, r25
 1c4:	81 bb       	out	0x11, r24	; 17
 1c6:	08 95       	ret
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	91 f0       	breq	.+36     	; 0x1f0 <DIO_SetPinDir+0x9a>
 1cc:	28 f0       	brcs	.+10     	; 0x1d8 <DIO_SetPinDir+0x82>
 1ce:	82 30       	cpi	r24, 0x02	; 2
 1d0:	d9 f0       	breq	.+54     	; 0x208 <DIO_SetPinDir+0xb2>
 1d2:	83 30       	cpi	r24, 0x03	; 3
 1d4:	29 f1       	breq	.+74     	; 0x220 <DIO_SetPinDir+0xca>
 1d6:	08 95       	ret
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_SetPinDir+0x8c>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_SetPinDir+0x88>
 1e6:	80 95       	com	r24
 1e8:	9a b3       	in	r25, 0x1a	; 26
 1ea:	89 23       	and	r24, r25
 1ec:	8a bb       	out	0x1a, r24	; 26
 1ee:	08 95       	ret
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_SetPinDir+0xa4>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_SetPinDir+0xa0>
 1fe:	80 95       	com	r24
 200:	97 b3       	in	r25, 0x17	; 23
 202:	89 23       	and	r24, r25
 204:	87 bb       	out	0x17, r24	; 23
 206:	08 95       	ret
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_SetPinDir+0xbc>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	6a 95       	dec	r22
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_SetPinDir+0xb8>
 216:	80 95       	com	r24
 218:	94 b3       	in	r25, 0x14	; 20
 21a:	89 23       	and	r24, r25
 21c:	84 bb       	out	0x14, r24	; 20
 21e:	08 95       	ret
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_SetPinDir+0xd4>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_SetPinDir+0xd0>
 22e:	80 95       	com	r24
 230:	91 b3       	in	r25, 0x11	; 17
 232:	89 23       	and	r24, r25
 234:	81 bb       	out	0x11, r24	; 17
 236:	08 95       	ret

00000238 <DIO_SetPinVal>:
 238:	44 23       	and	r20, r20
 23a:	b9 f1       	breq	.+110    	; 0x2aa <DIO_SetPinVal+0x72>
 23c:	41 30       	cpi	r20, 0x01	; 1
 23e:	09 f0       	breq	.+2      	; 0x242 <DIO_SetPinVal+0xa>
 240:	6b c0       	rjmp	.+214    	; 0x318 <DIO_SetPinVal+0xe0>
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	89 f0       	breq	.+34     	; 0x268 <DIO_SetPinVal+0x30>
 246:	28 f0       	brcs	.+10     	; 0x252 <DIO_SetPinVal+0x1a>
 248:	82 30       	cpi	r24, 0x02	; 2
 24a:	c9 f0       	breq	.+50     	; 0x27e <DIO_SetPinVal+0x46>
 24c:	83 30       	cpi	r24, 0x03	; 3
 24e:	11 f1       	breq	.+68     	; 0x294 <DIO_SetPinVal+0x5c>
 250:	08 95       	ret
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_SetPinVal+0x24>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_SetPinVal+0x20>
 260:	9b b3       	in	r25, 0x1b	; 27
 262:	89 2b       	or	r24, r25
 264:	8b bb       	out	0x1b, r24	; 27
 266:	08 95       	ret
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_SetPinVal+0x3a>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	6a 95       	dec	r22
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_SetPinVal+0x36>
 276:	98 b3       	in	r25, 0x18	; 24
 278:	89 2b       	or	r24, r25
 27a:	88 bb       	out	0x18, r24	; 24
 27c:	08 95       	ret
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_SetPinVal+0x50>
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	6a 95       	dec	r22
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_SetPinVal+0x4c>
 28c:	95 b3       	in	r25, 0x15	; 21
 28e:	89 2b       	or	r24, r25
 290:	85 bb       	out	0x15, r24	; 21
 292:	08 95       	ret
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_SetPinVal+0x66>
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_SetPinVal+0x62>
 2a2:	92 b3       	in	r25, 0x12	; 18
 2a4:	89 2b       	or	r24, r25
 2a6:	82 bb       	out	0x12, r24	; 18
 2a8:	08 95       	ret
 2aa:	81 30       	cpi	r24, 0x01	; 1
 2ac:	91 f0       	breq	.+36     	; 0x2d2 <DIO_SetPinVal+0x9a>
 2ae:	28 f0       	brcs	.+10     	; 0x2ba <DIO_SetPinVal+0x82>
 2b0:	82 30       	cpi	r24, 0x02	; 2
 2b2:	d9 f0       	breq	.+54     	; 0x2ea <DIO_SetPinVal+0xb2>
 2b4:	83 30       	cpi	r24, 0x03	; 3
 2b6:	29 f1       	breq	.+74     	; 0x302 <DIO_SetPinVal+0xca>
 2b8:	08 95       	ret
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_SetPinVal+0x8c>
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	6a 95       	dec	r22
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_SetPinVal+0x88>
 2c8:	80 95       	com	r24
 2ca:	9b b3       	in	r25, 0x1b	; 27
 2cc:	89 23       	and	r24, r25
 2ce:	8b bb       	out	0x1b, r24	; 27
 2d0:	08 95       	ret
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_SetPinVal+0xa4>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_SetPinVal+0xa0>
 2e0:	80 95       	com	r24
 2e2:	98 b3       	in	r25, 0x18	; 24
 2e4:	89 23       	and	r24, r25
 2e6:	88 bb       	out	0x18, r24	; 24
 2e8:	08 95       	ret
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_SetPinVal+0xbc>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	6a 95       	dec	r22
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_SetPinVal+0xb8>
 2f8:	80 95       	com	r24
 2fa:	95 b3       	in	r25, 0x15	; 21
 2fc:	89 23       	and	r24, r25
 2fe:	85 bb       	out	0x15, r24	; 21
 300:	08 95       	ret
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_SetPinVal+0xd4>
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	6a 95       	dec	r22
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_SetPinVal+0xd0>
 310:	80 95       	com	r24
 312:	92 b3       	in	r25, 0x12	; 18
 314:	89 23       	and	r24, r25
 316:	82 bb       	out	0x12, r24	; 18
 318:	08 95       	ret

0000031a <DIO_ReadPin>:
				break;
			}
}
void DIO_ReadPin( uint8 Port , uint8 Pin    ,uint8* Val    )
{
	switch (Port)
 31a:	81 30       	cpi	r24, 0x01	; 1
 31c:	89 f0       	breq	.+34     	; 0x340 <DIO_ReadPin+0x26>
 31e:	28 f0       	brcs	.+10     	; 0x32a <DIO_ReadPin+0x10>
 320:	82 30       	cpi	r24, 0x02	; 2
 322:	c9 f0       	breq	.+50     	; 0x356 <DIO_ReadPin+0x3c>
 324:	83 30       	cpi	r24, 0x03	; 3
 326:	11 f1       	breq	.+68     	; 0x36c <DIO_ReadPin+0x52>
 328:	08 95       	ret
				{
				case DIO_PORTA :
					*Val= GET_BIT(PINA,Pin);
 32a:	89 b3       	in	r24, 0x19	; 25
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_ReadPin+0x1a>
 330:	95 95       	asr	r25
 332:	87 95       	ror	r24
 334:	6a 95       	dec	r22
 336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_ReadPin+0x16>
 338:	81 70       	andi	r24, 0x01	; 1
 33a:	fa 01       	movw	r30, r20
 33c:	80 83       	st	Z, r24
				break;
 33e:	08 95       	ret
				case DIO_PORTB :
					*Val = GET_BIT(PINB,Pin);
 340:	86 b3       	in	r24, 0x16	; 22
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_ReadPin+0x30>
 346:	95 95       	asr	r25
 348:	87 95       	ror	r24
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_ReadPin+0x2c>
 34e:	81 70       	andi	r24, 0x01	; 1
 350:	fa 01       	movw	r30, r20
 352:	80 83       	st	Z, r24
					break;
 354:	08 95       	ret
				case DIO_PORTC :
					*Val = GET_BIT(PINC,Pin);
 356:	83 b3       	in	r24, 0x13	; 19
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_ReadPin+0x46>
 35c:	95 95       	asr	r25
 35e:	87 95       	ror	r24
 360:	6a 95       	dec	r22
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_ReadPin+0x42>
 364:	81 70       	andi	r24, 0x01	; 1
 366:	fa 01       	movw	r30, r20
 368:	80 83       	st	Z, r24
					break;
 36a:	08 95       	ret
				case DIO_PORTD :
					*Val = GET_BIT(PIND,Pin);
 36c:	80 b3       	in	r24, 0x10	; 16
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_ReadPin+0x5c>
 372:	95 95       	asr	r25
 374:	87 95       	ror	r24
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_ReadPin+0x58>
 37a:	81 70       	andi	r24, 0x01	; 1
 37c:	fa 01       	movw	r30, r20
 37e:	80 83       	st	Z, r24
 380:	08 95       	ret

00000382 <LCD_WriteCommand>:
	LCD_WriteCommand(0x02);  // kadh 3malth return to home
#endif
}

void LCD_WriteCommand(uint8 cmd)  // rs cmd reg walh data reg
{
 382:	cf 93       	push	r28
 384:	c8 2f       	mov	r28, r24
 DIO_SetPinVal(LCD_4BIT_CMD_PORT,LCD_RS_PIN,DIO_PIN_LOW );
 386:	40 e0       	ldi	r20, 0x00	; 0
 388:	61 e0       	ldi	r22, 0x01	; 1
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_SetPinVal>
 DIO_SetPinVal(LCD_4BIT_CMD_PORT,LCD_RW_PIN,DIO_PIN_LOW );
 390:	40 e0       	ldi	r20, 0x00	; 0
 392:	62 e0       	ldi	r22, 0x02	; 2
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_SetPinVal>
 DIO_SetPinVal(LCD_4BIT_CMD_PORT,LCD_E_PIN,DIO_PIN_LOW );
 39a:	40 e0       	ldi	r20, 0x00	; 0
 39c:	63 e0       	ldi	r22, 0x03	; 3
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_SetPinVal>

 PORTA = (cmd & 0xf0)|(PORTA & 0x0f);
 3a4:	8b b3       	in	r24, 0x1b	; 27
 3a6:	9c 2f       	mov	r25, r28
 3a8:	90 7f       	andi	r25, 0xF0	; 240
 3aa:	8f 70       	andi	r24, 0x0F	; 15
 3ac:	89 2b       	or	r24, r25
 3ae:	8b bb       	out	0x1b, r24	; 27

 DIO_SetPinVal(LCD_4BIT_CMD_PORT,LCD_E_PIN,DIO_PIN_HIGH);
 3b0:	41 e0       	ldi	r20, 0x01	; 1
 3b2:	63 e0       	ldi	r22, 0x03	; 3
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_SetPinVal>
 3ba:	8f e9       	ldi	r24, 0x9F	; 159
 3bc:	9f e0       	ldi	r25, 0x0F	; 15
 3be:	01 97       	sbiw	r24, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <LCD_WriteCommand+0x3c>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <LCD_WriteCommand+0x42>
 3c4:	00 00       	nop
 _delay_ms(1); // bta3 latch
 DIO_SetPinVal(LCD_4BIT_CMD_PORT,LCD_E_PIN,DIO_PIN_LOW );
 3c6:	40 e0       	ldi	r20, 0x00	; 0
 3c8:	63 e0       	ldi	r22, 0x03	; 3
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_SetPinVal>

 PORTA = (cmd << 4)|(PORTA & 0x0f);
 3d0:	20 e1       	ldi	r18, 0x10	; 16
 3d2:	c2 9f       	mul	r28, r18
 3d4:	c0 01       	movw	r24, r0
 3d6:	11 24       	eor	r1, r1
 3d8:	9b b3       	in	r25, 0x1b	; 27
 3da:	9f 70       	andi	r25, 0x0F	; 15
 3dc:	89 2b       	or	r24, r25
 3de:	8b bb       	out	0x1b, r24	; 27

 DIO_SetPinVal(LCD_4BIT_CMD_PORT,LCD_E_PIN,DIO_PIN_HIGH);
 3e0:	41 e0       	ldi	r20, 0x01	; 1
 3e2:	63 e0       	ldi	r22, 0x03	; 3
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_SetPinVal>
 3ea:	8f e9       	ldi	r24, 0x9F	; 159
 3ec:	9f e0       	ldi	r25, 0x0F	; 15
 3ee:	01 97       	sbiw	r24, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <LCD_WriteCommand+0x6c>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <LCD_WriteCommand+0x72>
 3f4:	00 00       	nop
  _delay_ms(1); // bta3 latch
  DIO_SetPinVal(LCD_4BIT_CMD_PORT,LCD_E_PIN,DIO_PIN_LOW );
 3f6:	40 e0       	ldi	r20, 0x00	; 0
 3f8:	63 e0       	ldi	r22, 0x03	; 3
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_SetPinVal>
 400:	8f e1       	ldi	r24, 0x1F	; 31
 402:	9e e4       	ldi	r25, 0x4E	; 78
 404:	01 97       	sbiw	r24, 0x01	; 1
 406:	f1 f7       	brne	.-4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 40a:	00 00       	nop

  _delay_ms(5);
}
 40c:	cf 91       	pop	r28
 40e:	08 95       	ret

00000410 <LCD_Init>:
	LCD_WriteCommand(0x01);    //kadh clear lcd
	LCD_WriteCommand(0x06);   // kadh cursor right or inc
	LCD_WriteCommand(0x02);  // kadh 3malth return to home
#elif LCD_MODE == 4 //init the pins dir in 4bit mode

	DIO_SetPinDir(LCD_4BIT_CMD_PORT,LCD_RS_PIN, DIO_PIN_OUTPUT );
 410:	41 e0       	ldi	r20, 0x01	; 1
 412:	61 e0       	ldi	r22, 0x01	; 1
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_CMD_PORT,LCD_RW_PIN, DIO_PIN_OUTPUT );
 41a:	41 e0       	ldi	r20, 0x01	; 1
 41c:	62 e0       	ldi	r22, 0x02	; 2
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_CMD_PORT,LCD_E_PIN, DIO_PIN_OUTPUT );
 424:	41 e0       	ldi	r20, 0x01	; 1
 426:	63 e0       	ldi	r22, 0x03	; 3
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinDir>

	DIO_SetPinDir(LCD_4BIT_DATA_PORT, D4_PIN, DIO_PIN_OUTPUT);
 42e:	41 e0       	ldi	r20, 0x01	; 1
 430:	64 e0       	ldi	r22, 0x04	; 4
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_DATA_PORT, D5_PIN, DIO_PIN_OUTPUT);
 438:	41 e0       	ldi	r20, 0x01	; 1
 43a:	65 e0       	ldi	r22, 0x05	; 5
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_DATA_PORT, D6_PIN, DIO_PIN_OUTPUT);
 442:	41 e0       	ldi	r20, 0x01	; 1
 444:	66 e0       	ldi	r22, 0x06	; 6
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinDir>
	DIO_SetPinDir(LCD_4BIT_DATA_PORT, D7_PIN, DIO_PIN_OUTPUT);
 44c:	41 e0       	ldi	r20, 0x01	; 1
 44e:	67 e0       	ldi	r22, 0x07	; 7
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPinDir>
 456:	2f ef       	ldi	r18, 0xFF	; 255
 458:	81 ee       	ldi	r24, 0xE1	; 225
 45a:	94 e0       	ldi	r25, 0x04	; 4
 45c:	21 50       	subi	r18, 0x01	; 1
 45e:	80 40       	sbci	r24, 0x00	; 0
 460:	90 40       	sbci	r25, 0x00	; 0
 462:	e1 f7       	brne	.-8      	; 0x45c <LCD_Init+0x4c>
 464:	00 c0       	rjmp	.+0      	; 0x466 <LCD_Init+0x56>
 466:	00 00       	nop

	_delay_ms(100);
	// send commands to lcd for init as 4 bit mode
	LCD_WriteCommand(0x33);
 468:	83 e3       	ldi	r24, 0x33	; 51
 46a:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_WriteCommand>
	LCD_WriteCommand(0x32);
 46e:	82 e3       	ldi	r24, 0x32	; 50
 470:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_WriteCommand>
	LCD_WriteCommand(0x28);
 474:	88 e2       	ldi	r24, 0x28	; 40
 476:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_WriteCommand>

	LCD_WriteCommand(0x0c);     //kadh close cursor
 47a:	8c e0       	ldi	r24, 0x0C	; 12
 47c:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);    //kadh clear lcd
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);   // kadh cursor right or inc
 486:	86 e0       	ldi	r24, 0x06	; 6
 488:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_WriteCommand>
	LCD_WriteCommand(0x02);  // kadh 3malth return to home
 48c:	82 e0       	ldi	r24, 0x02	; 2
 48e:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_WriteCommand>
 492:	08 95       	ret

00000494 <LCD_WriteChar>:
  DIO_SetPinVal(LCD_4BIT_CMD_PORT,LCD_E_PIN,DIO_PIN_LOW );

  _delay_ms(5);
}
void LCD_WriteChar(uint8 chr)
{
 494:	cf 93       	push	r28
 496:	c8 2f       	mov	r28, r24
	 DIO_SetPinVal(LCD_4BIT_CMD_PORT,LCD_RS_PIN,DIO_PIN_HIGH ); // Rs High bass kadh htktb 3lah data reg
 498:	41 e0       	ldi	r20, 0x01	; 1
 49a:	61 e0       	ldi	r22, 0x01	; 1
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_SetPinVal>
	 DIO_SetPinVal(LCD_4BIT_CMD_PORT,LCD_RW_PIN,DIO_PIN_LOW );
 4a2:	40 e0       	ldi	r20, 0x00	; 0
 4a4:	62 e0       	ldi	r22, 0x02	; 2
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_SetPinVal>
	 DIO_SetPinVal(LCD_4BIT_CMD_PORT,LCD_E_PIN,DIO_PIN_LOW );
 4ac:	40 e0       	ldi	r20, 0x00	; 0
 4ae:	63 e0       	ldi	r22, 0x03	; 3
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_SetPinVal>

	 PORTA = (chr & 0xf0)|(PORTA & 0x0f);
 4b6:	8b b3       	in	r24, 0x1b	; 27
 4b8:	9c 2f       	mov	r25, r28
 4ba:	90 7f       	andi	r25, 0xF0	; 240
 4bc:	8f 70       	andi	r24, 0x0F	; 15
 4be:	89 2b       	or	r24, r25
 4c0:	8b bb       	out	0x1b, r24	; 27

	 DIO_SetPinVal(LCD_4BIT_CMD_PORT,LCD_E_PIN,DIO_PIN_HIGH);
 4c2:	41 e0       	ldi	r20, 0x01	; 1
 4c4:	63 e0       	ldi	r22, 0x03	; 3
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_SetPinVal>
 4cc:	8f e9       	ldi	r24, 0x9F	; 159
 4ce:	9f e0       	ldi	r25, 0x0F	; 15
 4d0:	01 97       	sbiw	r24, 0x01	; 1
 4d2:	f1 f7       	brne	.-4      	; 0x4d0 <LCD_WriteChar+0x3c>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <LCD_WriteChar+0x42>
 4d6:	00 00       	nop
	 _delay_ms(1); // bta3 latch
	 DIO_SetPinVal(LCD_4BIT_CMD_PORT,LCD_E_PIN,DIO_PIN_LOW );
 4d8:	40 e0       	ldi	r20, 0x00	; 0
 4da:	63 e0       	ldi	r22, 0x03	; 3
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_SetPinVal>

	 PORTA = (chr << 4)|(PORTA & 0x0f);
 4e2:	20 e1       	ldi	r18, 0x10	; 16
 4e4:	c2 9f       	mul	r28, r18
 4e6:	c0 01       	movw	r24, r0
 4e8:	11 24       	eor	r1, r1
 4ea:	9b b3       	in	r25, 0x1b	; 27
 4ec:	9f 70       	andi	r25, 0x0F	; 15
 4ee:	89 2b       	or	r24, r25
 4f0:	8b bb       	out	0x1b, r24	; 27

	 DIO_SetPinVal(LCD_4BIT_CMD_PORT,LCD_E_PIN,DIO_PIN_HIGH);
 4f2:	41 e0       	ldi	r20, 0x01	; 1
 4f4:	63 e0       	ldi	r22, 0x03	; 3
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_SetPinVal>
 4fc:	8f e9       	ldi	r24, 0x9F	; 159
 4fe:	9f e0       	ldi	r25, 0x0F	; 15
 500:	01 97       	sbiw	r24, 0x01	; 1
 502:	f1 f7       	brne	.-4      	; 0x500 <LCD_WriteChar+0x6c>
 504:	00 c0       	rjmp	.+0      	; 0x506 <LCD_WriteChar+0x72>
 506:	00 00       	nop
	  _delay_ms(1); // bta3 latch
	  DIO_SetPinVal(LCD_4BIT_CMD_PORT,LCD_E_PIN,DIO_PIN_LOW );
 508:	40 e0       	ldi	r20, 0x00	; 0
 50a:	63 e0       	ldi	r22, 0x03	; 3
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	0e 94 1c 01 	call	0x238	; 0x238 <DIO_SetPinVal>
 512:	8f e1       	ldi	r24, 0x1F	; 31
 514:	9e e4       	ldi	r25, 0x4E	; 78
 516:	01 97       	sbiw	r24, 0x01	; 1
 518:	f1 f7       	brne	.-4      	; 0x516 <LCD_WriteChar+0x82>
 51a:	00 c0       	rjmp	.+0      	; 0x51c <LCD_WriteChar+0x88>
 51c:	00 00       	nop

	  _delay_ms(5);
}
 51e:	cf 91       	pop	r28
 520:	08 95       	ret

00000522 <LCD_WriteString>:

void LCD_WriteString(uint8* str)
{
 522:	0f 93       	push	r16
 524:	1f 93       	push	r17
 526:	cf 93       	push	r28
 528:	8c 01       	movw	r16, r24
uint8 i=0;
 52a:	c0 e0       	ldi	r28, 0x00	; 0
while(str[i] != '\0')
 52c:	03 c0       	rjmp	.+6      	; 0x534 <LCD_WriteString+0x12>
{
	LCD_WriteChar(str[i]);
 52e:	0e 94 4a 02 	call	0x494	; 0x494 <LCD_WriteChar>
	i++;
 532:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_WriteString(uint8* str)
{
uint8 i=0;
while(str[i] != '\0')
 534:	f8 01       	movw	r30, r16
 536:	ec 0f       	add	r30, r28
 538:	f1 1d       	adc	r31, r1
 53a:	80 81       	ld	r24, Z
 53c:	81 11       	cpse	r24, r1
 53e:	f7 cf       	rjmp	.-18     	; 0x52e <LCD_WriteString+0xc>
{
	LCD_WriteChar(str[i]);
	i++;
}
}
 540:	cf 91       	pop	r28
 542:	1f 91       	pop	r17
 544:	0f 91       	pop	r16
 546:	08 95       	ret

00000548 <LCD_GoTo>:
void LCD_GoTo(uint8 row , uint8  col) // 3az akteb feh ay mkan ana 3ayzh
{
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
 54c:	00 d0       	rcall	.+0      	; 0x54e <LCD_GoTo+0x6>
 54e:	cd b7       	in	r28, 0x3d	; 61
 550:	de b7       	in	r29, 0x3e	; 62
uint8 pos[2]={0x80,0xc0};
 552:	90 e8       	ldi	r25, 0x80	; 128
 554:	99 83       	std	Y+1, r25	; 0x01
 556:	90 ec       	ldi	r25, 0xC0	; 192
 558:	9a 83       	std	Y+2, r25	; 0x02
LCD_WriteCommand(pos[row]+col);
 55a:	e1 e0       	ldi	r30, 0x01	; 1
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	ec 0f       	add	r30, r28
 560:	fd 1f       	adc	r31, r29
 562:	e8 0f       	add	r30, r24
 564:	f1 1d       	adc	r31, r1
 566:	80 81       	ld	r24, Z
 568:	86 0f       	add	r24, r22
 56a:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_WriteCommand>
}
 56e:	0f 90       	pop	r0
 570:	0f 90       	pop	r0
 572:	df 91       	pop	r29
 574:	cf 91       	pop	r28
 576:	08 95       	ret

00000578 <LCD_Clear>:
void LCD_Clear(void)
{
LCD_WriteCommand(0x01);
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	0e 94 c1 01 	call	0x382	; 0x382 <LCD_WriteCommand>
 57e:	08 95       	ret

00000580 <main>:
 */
#include "button.h"
#include "LCD.h"
void main (void)
{
	LCD_Init();
 580:	0e 94 08 02 	call	0x410	; 0x410 <LCD_Init>
	Button_Init();
 584:	0e 94 41 00 	call	0x82	; 0x82 <Button_Init>
	LCD_WriteString("BT7BNY?");
 588:	80 e6       	ldi	r24, 0x60	; 96
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	0e 94 91 02 	call	0x522	; 0x522 <LCD_WriteString>
	LCD_GoTo(1,0);
 590:	60 e0       	ldi	r22, 0x00	; 0
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_GoTo>
	LCD_WriteString("1)YES       2)NO");
 598:	88 e6       	ldi	r24, 0x68	; 104
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	0e 94 91 02 	call	0x522	; 0x522 <LCD_WriteString>
	while(1)
	{
		if(Button_GetValue(BUTTON_2)==1)
 5a0:	82 e0       	ldi	r24, 0x02	; 2
 5a2:	0e 94 51 00 	call	0xa2	; 0xa2 <Button_GetValue>
 5a6:	81 30       	cpi	r24, 0x01	; 1
 5a8:	31 f4       	brne	.+12     	; 0x5b6 <main+0x36>
		{
			LCD_Clear();
 5aa:	0e 94 bc 02 	call	0x578	; 0x578 <LCD_Clear>
			LCD_WriteString("LA tswe MHm kos omak");
 5ae:	89 e7       	ldi	r24, 0x79	; 121
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	0e 94 91 02 	call	0x522	; 0x522 <LCD_WriteString>
			//LCD_GoTo(1,0);
			//LCD_WriteString("dl3na");
		}
		if (Button_GetValue(BUTTON_1)==1)
 5b6:	86 e0       	ldi	r24, 0x06	; 6
 5b8:	0e 94 51 00 	call	0xa2	; 0xa2 <Button_GetValue>
 5bc:	81 30       	cpi	r24, 0x01	; 1
 5be:	31 f4       	brne	.+12     	; 0x5cc <main+0x4c>
		{
			LCD_Clear();
 5c0:	0e 94 bc 02 	call	0x578	; 0x578 <LCD_Clear>
			//LCD_GoTo(1,0);
			LCD_WriteString("I LOVE YOU MORE");
 5c4:	8e e8       	ldi	r24, 0x8E	; 142
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	0e 94 91 02 	call	0x522	; 0x522 <LCD_WriteString>
		}
		if (Button_GetValue(BUTTON_0)==1)
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	0e 94 51 00 	call	0xa2	; 0xa2 <Button_GetValue>
 5d2:	81 30       	cpi	r24, 0x01	; 1
 5d4:	29 f7       	brne	.-54     	; 0x5a0 <main+0x20>
		{
			LCD_Clear();
 5d6:	0e 94 bc 02 	call	0x578	; 0x578 <LCD_Clear>
			LCD_WriteString("BT7BNY?");
 5da:	80 e6       	ldi	r24, 0x60	; 96
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	0e 94 91 02 	call	0x522	; 0x522 <LCD_WriteString>
			LCD_GoTo(1,0);
 5e2:	60 e0       	ldi	r22, 0x00	; 0
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	0e 94 a4 02 	call	0x548	; 0x548 <LCD_GoTo>
			LCD_WriteString("1)YES       2)NO");
 5ea:	88 e6       	ldi	r24, 0x68	; 104
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	0e 94 91 02 	call	0x522	; 0x522 <LCD_WriteString>
 5f2:	d6 cf       	rjmp	.-84     	; 0x5a0 <main+0x20>

000005f4 <_exit>:
 5f4:	f8 94       	cli

000005f6 <__stop_program>:
 5f6:	ff cf       	rjmp	.-2      	; 0x5f6 <__stop_program>
